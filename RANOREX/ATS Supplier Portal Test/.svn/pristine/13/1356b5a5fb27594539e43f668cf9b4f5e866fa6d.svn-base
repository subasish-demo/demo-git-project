///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ATS_Supplier_Portal_Test
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The WriteData recording.
    /// </summary>
    [TestModule("f2ee6cc8-e878-4419-a4bd-8d0357f5e1e4", ModuleType.Recording, 1)]
    public partial class WriteData : ITestModule
    {
        /// <summary>
        /// Holds an instance of the ATS_Supplier_Portal_TestRepository repository.
        /// </summary>
        public static ATS_Supplier_Portal_TestRepository repo = ATS_Supplier_Portal_TestRepository.Instance;

        static WriteData instance = new WriteData();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public WriteData()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static WriteData Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            SPCollection.UpdateExcel("\\\\ca01a9001\\pgmis\\Deployment_DEV\\Ranorex\\Supplier_Portal\\Web\\QuoteExport\\12491.xlsx", "test", "I", "2");
            Delay.Milliseconds(0);
            
            SPCollection.UpdateExcel("\\\\ca01a9001\\pgmis\\Deployment_DEV\\Ranorex\\Supplier_Portal\\Web\\QuoteExport\\12491.xlsx", "test", "J", "2");
            Delay.Milliseconds(0);
            
            SPCollection.UpdateExcel("\\\\ca01a9001\\pgmis\\Deployment_DEV\\Ranorex\\Supplier_Portal\\Web\\QuoteExport\\12491.xlsx", "test", "M", "2");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(3));
            Delay.Duration(3000, false);
            
            OpenExcel();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 45s to exist. Associated repository item: 'Excel.SomeButton'", repo.Excel.SomeButtonInfo, new ActionTimeout(45000), new RecordItemIndex(5));
            repo.Excel.SomeButtonInfo.WaitForExists(45000);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(6));
            Delay.Duration(3000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.Excel.Self, false, new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LControlKey down}{Akey}{LControlKey up}'.", new RecordItemIndex(8));
            Keyboard.Press("{LControlKey down}{Akey}{LControlKey up}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LControlKey down}{Ckey}{LControlKey up}'.", new RecordItemIndex(9));
            Keyboard.Press("{LControlKey down}{Ckey}{LControlKey up}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Minimize() on item 'Excel'.", repo.Excel.SelfInfo, new RecordItemIndex(10));
            repo.Excel.Self.Minimize();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
