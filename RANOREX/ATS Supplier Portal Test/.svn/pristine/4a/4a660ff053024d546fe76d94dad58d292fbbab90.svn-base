///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using ATS.CodeLibrary.DataUtilities.SQL;
using ATS.CodeLibrary.DataUtilities.Cryptography;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ATS_Supplier_Portal_Test
{
    public partial class SubmitSingleQuote
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ClickPromiseDate()
        {
        	repo.LoginATSSupplierPortal.BtnSetPromise.PerformClick();
        }

        public void ExpandRFQInfo()
        {
        	var expanded = repo.LoginATSSupplierPortal.ATagRFQInfo.Element.GetAttributeValueText("aria-expanded");
        	Report.Info(expanded);
 //       	if(expanded == "false")
 //       	{
        	//	Report.Info("RFQ Info not expanded.  Expanding...");
        		repo.LoginATSSupplierPortal.ATagRFQInfo.Click();
        		Report.Log(ReportLevel.Info, "Validation", "Validating Shipping Method Text = " + varShippingMethodText +" on item 'LoginATSSupplierPortal.ShippingMethodWebTag'.", repo.LoginATSSupplierPortal.ShippingMethodWebTagInfo, new RecordItemIndex(8));
        		Validate.AttributeEqual(repo.LoginATSSupplierPortal.ShippingMethodWebTagInfo, "TagValue", varShippingMethodText);
        		Delay.Seconds(2.0);
        		Report.Screenshot(repo.LoginATSSupplierPortal.Self);
        		Delay.Seconds(2.0);
        		repo.LoginATSSupplierPortal.ATagRFQInfo.Click();
  //      		Validate.AttributeEqual(repo.LoginATSSupplierPortal.ATagRFQInfoInfo, "aria-expanded", "false");
 //       	}
//        	else
//        	{
//        		Report.Info("RFQ Info is already expanded.");
//        		Report.Log(ReportLevel.Info, "Validation", "Validating Shipping Method Text = " + varShippingMethodText +" on item 'LoginATSSupplierPortal.ShippingMethodWebTag'.", repo.LoginATSSupplierPortal.ShippingMethodWebTagInfo, new RecordItemIndex(8));
//        		Validate.AttributeEqual(repo.LoginATSSupplierPortal.ShippingMethodWebTagInfo, "TagValue", varShippingMethodText);
//        		Delay.Seconds(2.0);
//        		Report.Screenshot(repo.LoginATSSupplierPortal.Self);
//        		Delay.Seconds(2.0);
//        		repo.LoginATSSupplierPortal.ATagRFQInfo.Click();
//        		Validate.AttributeEqual(repo.LoginATSSupplierPortal.ATagRFQInfoInfo, "aria-expanded", "false");
//        	}
        }

        public void ValidateRequestedShipDate(string ReqDate)
        {
        //	var ShippingMethodText = "OCN - Ocean";
        	var method = varShippingMethodText.Substring(0, varShippingMethodText.IndexOf("-")).Trim();
        	var SQL = "SELECT Duration FROM dbo.tblShipping (NOLOCK) WHERE Method = @method";
         	var dic = new Dictionary<string, object> { { "@method", method } };
            var creds = SPCollection.credsSPDev;
            var results = SqlHelper.ExecuteQuery(creds, SQL, dic);
            var data = results.Tables[0];
            var duration = Convert.ToDouble(data.Rows[0][0]);
            var today = System.DateTime.Today.AddDays((365-(duration)));
            var day = today.Date.ToString("MM/dd/yyyy");
            Ranorex.Validate.IsTrue(day==ReqDate,"Validating if the Requested Ship Date is equal to: " + day + ".  The validation @ValidateRESULT@!");
        }

    }
}
