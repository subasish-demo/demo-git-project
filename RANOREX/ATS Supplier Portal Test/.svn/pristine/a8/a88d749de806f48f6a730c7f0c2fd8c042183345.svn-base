//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ATS.CodeLibrary.svwebservice {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ATSShareVisWebServiceSoap", Namespace="http://atsportal.atsna.atsauto.net/")]
    public partial class ATSShareVisWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsUserInMossGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback SVIsUserInMossGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback SVIsUserGroupMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SVGetSingleUserPropertyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SVGetPropertyByAccountIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SVAddUserToSPGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSupportnetTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSupportnetTicketWithParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecryptTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXmlStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatementOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDbValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDbValuesParamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDbValuesStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDbValuesStructOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDbValuesStructRecursiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExcecuteSqlUpdateStatementReturnNumRowsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDbValuesStringRecursiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOleConnectionStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerPathTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNotifictionMonitorListRecipientOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNotificationMonitorSpecifiedRecipientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateAccpacGLExportFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSharepointListDirectoriesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ATSShareVisWebService() {
            this.Url = global::ATS.CodeLibrary.Properties.Settings.Default.ATSCodeLibrary_svwebservice_ATSShareVisWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsUserInMossGroupCompletedEventHandler IsUserInMossGroupCompleted;
        
        /// <remarks/>
        public event SVIsUserInMossGroupCompletedEventHandler SVIsUserInMossGroupCompleted;
        
        /// <remarks/>
        public event SVIsUserGroupMemberCompletedEventHandler SVIsUserGroupMemberCompleted;
        
        /// <remarks/>
        public event SVGetSingleUserPropertyCompletedEventHandler SVGetSingleUserPropertyCompleted;
        
        /// <remarks/>
        public event SVGetPropertyByAccountIDCompletedEventHandler SVGetPropertyByAccountIDCompleted;
        
        /// <remarks/>
        public event SVAddUserToSPGroupCompletedEventHandler SVAddUserToSPGroupCompleted;
        
        /// <remarks/>
        public event CreateSupportnetTicketCompletedEventHandler CreateSupportnetTicketCompleted;
        
        /// <remarks/>
        public event CreateSupportnetTicketWithParametersCompletedEventHandler CreateSupportnetTicketWithParametersCompleted;
        
        /// <remarks/>
        public event CreateDirectoryCompletedEventHandler CreateDirectoryCompleted;
        
        /// <remarks/>
        public event UpdateListCompletedEventHandler UpdateListCompleted;
        
        /// <remarks/>
        public event DecryptTextCompletedEventHandler DecryptTextCompleted;
        
        /// <remarks/>
        public event EncryptTextCompletedEventHandler EncryptTextCompleted;
        
        /// <remarks/>
        public event GetXmlStringCompletedEventHandler GetXmlStringCompleted;
        
        /// <remarks/>
        public event GetStatementCompletedEventHandler GetStatementCompleted;
        
        /// <remarks/>
        public event GetDbValuesCompletedEventHandler GetDbValuesCompleted;
        
        /// <remarks/>
        public event GetDbValuesParamsCompletedEventHandler GetDbValuesParamsCompleted;
        
        /// <remarks/>
        public event GetDbValuesStringCompletedEventHandler GetDbValuesStringCompleted;
        
        /// <remarks/>
        public event GetDbValuesStructCompletedEventHandler GetDbValuesStructCompleted;
        
        /// <remarks/>
        public event GetDbValuesStructRecursiveCompletedEventHandler GetDbValuesStructRecursiveCompleted;
        
        /// <remarks/>
        public event ExcecuteSqlUpdateStatementReturnNumRowsCompletedEventHandler ExcecuteSqlUpdateStatementReturnNumRowsCompleted;
        
        /// <remarks/>
        public event GetDbValuesStringRecursiveCompletedEventHandler GetDbValuesStringRecursiveCompleted;
        
        /// <remarks/>
        public event GetOleConnectionStringCompletedEventHandler GetOleConnectionStringCompleted;
        
        /// <remarks/>
        public event GetServerPathTestCompletedEventHandler GetServerPathTestCompleted;
        
        /// <remarks/>
        public event GetClientUserNameCompletedEventHandler GetClientUserNameCompleted;
        
        /// <remarks/>
        public event CreateNotifictionMonitorListRecipientCompletedEventHandler CreateNotifictionMonitorListRecipientCompleted;
        
        /// <remarks/>
        public event CreateNotificationMonitorSpecifiedRecipientCompletedEventHandler CreateNotificationMonitorSpecifiedRecipientCompleted;
        
        /// <remarks/>
        public event GenerateAccpacGLExportFileCompletedEventHandler GenerateAccpacGLExportFileCompleted;
        
        /// <remarks/>
        public event CreateSharepointListDirectoriesCompletedEventHandler CreateSharepointListDirectoriesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/IsUserInMossGroup", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsUserInMossGroup(string employeeUserName, string groupName) {
            object[] results = this.Invoke("IsUserInMossGroup", new object[] {
                        employeeUserName,
                        groupName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsUserInMossGroupAsync(string employeeUserName, string groupName) {
            this.IsUserInMossGroupAsync(employeeUserName, groupName, null);
        }
        
        /// <remarks/>
        public void IsUserInMossGroupAsync(string employeeUserName, string groupName, object userState) {
            if ((this.IsUserInMossGroupOperationCompleted == null)) {
                this.IsUserInMossGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserInMossGroupOperationCompleted);
            }
            this.InvokeAsync("IsUserInMossGroup", new object[] {
                        employeeUserName,
                        groupName}, this.IsUserInMossGroupOperationCompleted, userState);
        }
        
        private void OnIsUserInMossGroupOperationCompleted(object arg) {
            if ((this.IsUserInMossGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserInMossGroupCompleted(this, new IsUserInMossGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/SVIsUserInMossGroup", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SVIsUserInMossGroup(string employeeUserName, string groupName) {
            object[] results = this.Invoke("SVIsUserInMossGroup", new object[] {
                        employeeUserName,
                        groupName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SVIsUserInMossGroupAsync(string employeeUserName, string groupName) {
            this.SVIsUserInMossGroupAsync(employeeUserName, groupName, null);
        }
        
        /// <remarks/>
        public void SVIsUserInMossGroupAsync(string employeeUserName, string groupName, object userState) {
            if ((this.SVIsUserInMossGroupOperationCompleted == null)) {
                this.SVIsUserInMossGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSVIsUserInMossGroupOperationCompleted);
            }
            this.InvokeAsync("SVIsUserInMossGroup", new object[] {
                        employeeUserName,
                        groupName}, this.SVIsUserInMossGroupOperationCompleted, userState);
        }
        
        private void OnSVIsUserInMossGroupOperationCompleted(object arg) {
            if ((this.SVIsUserInMossGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SVIsUserInMossGroupCompleted(this, new SVIsUserInMossGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/SVIsUserGroupMember", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] SVIsUserGroupMember(string emailAddress, string groupNameLookup, string userName) {
            object[] results = this.Invoke("SVIsUserGroupMember", new object[] {
                        emailAddress,
                        groupNameLookup,
                        userName});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void SVIsUserGroupMemberAsync(string emailAddress, string groupNameLookup, string userName) {
            this.SVIsUserGroupMemberAsync(emailAddress, groupNameLookup, userName, null);
        }
        
        /// <remarks/>
        public void SVIsUserGroupMemberAsync(string emailAddress, string groupNameLookup, string userName, object userState) {
            if ((this.SVIsUserGroupMemberOperationCompleted == null)) {
                this.SVIsUserGroupMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSVIsUserGroupMemberOperationCompleted);
            }
            this.InvokeAsync("SVIsUserGroupMember", new object[] {
                        emailAddress,
                        groupNameLookup,
                        userName}, this.SVIsUserGroupMemberOperationCompleted, userState);
        }
        
        private void OnSVIsUserGroupMemberOperationCompleted(object arg) {
            if ((this.SVIsUserGroupMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SVIsUserGroupMemberCompleted(this, new SVIsUserGroupMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/SVGetSingleUserProperty", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] SVGetSingleUserProperty(string emailAddress, string userName, string propertyName) {
            object[] results = this.Invoke("SVGetSingleUserProperty", new object[] {
                        emailAddress,
                        userName,
                        propertyName});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void SVGetSingleUserPropertyAsync(string emailAddress, string userName, string propertyName) {
            this.SVGetSingleUserPropertyAsync(emailAddress, userName, propertyName, null);
        }
        
        /// <remarks/>
        public void SVGetSingleUserPropertyAsync(string emailAddress, string userName, string propertyName, object userState) {
            if ((this.SVGetSingleUserPropertyOperationCompleted == null)) {
                this.SVGetSingleUserPropertyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSVGetSingleUserPropertyOperationCompleted);
            }
            this.InvokeAsync("SVGetSingleUserProperty", new object[] {
                        emailAddress,
                        userName,
                        propertyName}, this.SVGetSingleUserPropertyOperationCompleted, userState);
        }
        
        private void OnSVGetSingleUserPropertyOperationCompleted(object arg) {
            if ((this.SVGetSingleUserPropertyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SVGetSingleUserPropertyCompleted(this, new SVGetSingleUserPropertyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/SVGetPropertyByAccountID", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] SVGetPropertyByAccountID(string accountID, string propertyName) {
            object[] results = this.Invoke("SVGetPropertyByAccountID", new object[] {
                        accountID,
                        propertyName});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void SVGetPropertyByAccountIDAsync(string accountID, string propertyName) {
            this.SVGetPropertyByAccountIDAsync(accountID, propertyName, null);
        }
        
        /// <remarks/>
        public void SVGetPropertyByAccountIDAsync(string accountID, string propertyName, object userState) {
            if ((this.SVGetPropertyByAccountIDOperationCompleted == null)) {
                this.SVGetPropertyByAccountIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSVGetPropertyByAccountIDOperationCompleted);
            }
            this.InvokeAsync("SVGetPropertyByAccountID", new object[] {
                        accountID,
                        propertyName}, this.SVGetPropertyByAccountIDOperationCompleted, userState);
        }
        
        private void OnSVGetPropertyByAccountIDOperationCompleted(object arg) {
            if ((this.SVGetPropertyByAccountIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SVGetPropertyByAccountIDCompleted(this, new SVGetPropertyByAccountIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/SVAddUserToSPGroup", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SVAddUserToSPGroup(string loginName, string groupName, string webUrl) {
            object[] results = this.Invoke("SVAddUserToSPGroup", new object[] {
                        loginName,
                        groupName,
                        webUrl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SVAddUserToSPGroupAsync(string loginName, string groupName, string webUrl) {
            this.SVAddUserToSPGroupAsync(loginName, groupName, webUrl, null);
        }
        
        /// <remarks/>
        public void SVAddUserToSPGroupAsync(string loginName, string groupName, string webUrl, object userState) {
            if ((this.SVAddUserToSPGroupOperationCompleted == null)) {
                this.SVAddUserToSPGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSVAddUserToSPGroupOperationCompleted);
            }
            this.InvokeAsync("SVAddUserToSPGroup", new object[] {
                        loginName,
                        groupName,
                        webUrl}, this.SVAddUserToSPGroupOperationCompleted, userState);
        }
        
        private void OnSVAddUserToSPGroupOperationCompleted(object arg) {
            if ((this.SVAddUserToSPGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SVAddUserToSPGroupCompleted(this, new SVAddUserToSPGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/CreateSupportnetTicket", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CreateSupportnetTicket(SupportNetTicket snt) {
            object[] results = this.Invoke("CreateSupportnetTicket", new object[] {
                        snt});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateSupportnetTicketAsync(SupportNetTicket snt) {
            this.CreateSupportnetTicketAsync(snt, null);
        }
        
        /// <remarks/>
        public void CreateSupportnetTicketAsync(SupportNetTicket snt, object userState) {
            if ((this.CreateSupportnetTicketOperationCompleted == null)) {
                this.CreateSupportnetTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSupportnetTicketOperationCompleted);
            }
            this.InvokeAsync("CreateSupportnetTicket", new object[] {
                        snt}, this.CreateSupportnetTicketOperationCompleted, userState);
        }
        
        private void OnCreateSupportnetTicketOperationCompleted(object arg) {
            if ((this.CreateSupportnetTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSupportnetTicketCompleted(this, new CreateSupportnetTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/CreateSupportnetTicketWithParameters", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CreateSupportnetTicketWithParameters(string snTicketTitle, string snTicketDescription, string snRequestCompleteDate, string snRequestedPriority, string snIssueType, string snIssueSubType, string snReqOnBehalfOf) {
            object[] results = this.Invoke("CreateSupportnetTicketWithParameters", new object[] {
                        snTicketTitle,
                        snTicketDescription,
                        snRequestCompleteDate,
                        snRequestedPriority,
                        snIssueType,
                        snIssueSubType,
                        snReqOnBehalfOf});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateSupportnetTicketWithParametersAsync(string snTicketTitle, string snTicketDescription, string snRequestCompleteDate, string snRequestedPriority, string snIssueType, string snIssueSubType, string snReqOnBehalfOf) {
            this.CreateSupportnetTicketWithParametersAsync(snTicketTitle, snTicketDescription, snRequestCompleteDate, snRequestedPriority, snIssueType, snIssueSubType, snReqOnBehalfOf, null);
        }
        
        /// <remarks/>
        public void CreateSupportnetTicketWithParametersAsync(string snTicketTitle, string snTicketDescription, string snRequestCompleteDate, string snRequestedPriority, string snIssueType, string snIssueSubType, string snReqOnBehalfOf, object userState) {
            if ((this.CreateSupportnetTicketWithParametersOperationCompleted == null)) {
                this.CreateSupportnetTicketWithParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSupportnetTicketWithParametersOperationCompleted);
            }
            this.InvokeAsync("CreateSupportnetTicketWithParameters", new object[] {
                        snTicketTitle,
                        snTicketDescription,
                        snRequestCompleteDate,
                        snRequestedPriority,
                        snIssueType,
                        snIssueSubType,
                        snReqOnBehalfOf}, this.CreateSupportnetTicketWithParametersOperationCompleted, userState);
        }
        
        private void OnCreateSupportnetTicketWithParametersOperationCompleted(object arg) {
            if ((this.CreateSupportnetTicketWithParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSupportnetTicketWithParametersCompleted(this, new CreateSupportnetTicketWithParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/CreateDirectory", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateDirectory(string path) {
            object[] results = this.Invoke("CreateDirectory", new object[] {
                        path});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateDirectoryAsync(string path) {
            this.CreateDirectoryAsync(path, null);
        }
        
        /// <remarks/>
        public void CreateDirectoryAsync(string path, object userState) {
            if ((this.CreateDirectoryOperationCompleted == null)) {
                this.CreateDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDirectoryOperationCompleted);
            }
            this.InvokeAsync("CreateDirectory", new object[] {
                        path}, this.CreateDirectoryOperationCompleted, userState);
        }
        
        private void OnCreateDirectoryOperationCompleted(object arg) {
            if ((this.CreateDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDirectoryCompleted(this, new CreateDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/UpdateList", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateList(string updateCAML, string subsiteWebUrl, string libraryName) {
            this.Invoke("UpdateList", new object[] {
                        updateCAML,
                        subsiteWebUrl,
                        libraryName});
        }
        
        /// <remarks/>
        public void UpdateListAsync(string updateCAML, string subsiteWebUrl, string libraryName) {
            this.UpdateListAsync(updateCAML, subsiteWebUrl, libraryName, null);
        }
        
        /// <remarks/>
        public void UpdateListAsync(string updateCAML, string subsiteWebUrl, string libraryName, object userState) {
            if ((this.UpdateListOperationCompleted == null)) {
                this.UpdateListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateListOperationCompleted);
            }
            this.InvokeAsync("UpdateList", new object[] {
                        updateCAML,
                        subsiteWebUrl,
                        libraryName}, this.UpdateListOperationCompleted, userState);
        }
        
        private void OnUpdateListOperationCompleted(object arg) {
            if ((this.UpdateListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/DecryptText", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DecryptText(string inputText) {
            object[] results = this.Invoke("DecryptText", new object[] {
                        inputText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DecryptTextAsync(string inputText) {
            this.DecryptTextAsync(inputText, null);
        }
        
        /// <remarks/>
        public void DecryptTextAsync(string inputText, object userState) {
            if ((this.DecryptTextOperationCompleted == null)) {
                this.DecryptTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptTextOperationCompleted);
            }
            this.InvokeAsync("DecryptText", new object[] {
                        inputText}, this.DecryptTextOperationCompleted, userState);
        }
        
        private void OnDecryptTextOperationCompleted(object arg) {
            if ((this.DecryptTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecryptTextCompleted(this, new DecryptTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/EncryptText", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptText(string inputText) {
            object[] results = this.Invoke("EncryptText", new object[] {
                        inputText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptTextAsync(string inputText) {
            this.EncryptTextAsync(inputText, null);
        }
        
        /// <remarks/>
        public void EncryptTextAsync(string inputText, object userState) {
            if ((this.EncryptTextOperationCompleted == null)) {
                this.EncryptTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptTextOperationCompleted);
            }
            this.InvokeAsync("EncryptText", new object[] {
                        inputText}, this.EncryptTextOperationCompleted, userState);
        }
        
        private void OnEncryptTextOperationCompleted(object arg) {
            if ((this.EncryptTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptTextCompleted(this, new EncryptTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetXmlString", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXmlString(string filePath, string elementName) {
            object[] results = this.Invoke("GetXmlString", new object[] {
                        filePath,
                        elementName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXmlStringAsync(string filePath, string elementName) {
            this.GetXmlStringAsync(filePath, elementName, null);
        }
        
        /// <remarks/>
        public void GetXmlStringAsync(string filePath, string elementName, object userState) {
            if ((this.GetXmlStringOperationCompleted == null)) {
                this.GetXmlStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXmlStringOperationCompleted);
            }
            this.InvokeAsync("GetXmlString", new object[] {
                        filePath,
                        elementName}, this.GetXmlStringOperationCompleted, userState);
        }
        
        private void OnGetXmlStringOperationCompleted(object arg) {
            if ((this.GetXmlStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXmlStringCompleted(this, new GetXmlStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetStatement", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStatement(string managedXmlFilePath, string paramVals) {
            object[] results = this.Invoke("GetStatement", new object[] {
                        managedXmlFilePath,
                        paramVals});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatementAsync(string managedXmlFilePath, string paramVals) {
            this.GetStatementAsync(managedXmlFilePath, paramVals, null);
        }
        
        /// <remarks/>
        public void GetStatementAsync(string managedXmlFilePath, string paramVals, object userState) {
            if ((this.GetStatementOperationCompleted == null)) {
                this.GetStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatementOperationCompleted);
            }
            this.InvokeAsync("GetStatement", new object[] {
                        managedXmlFilePath,
                        paramVals}, this.GetStatementOperationCompleted, userState);
        }
        
        private void OnGetStatementOperationCompleted(object arg) {
            if ((this.GetStatementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatementCompleted(this, new GetStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetDbValues", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] GetDbValues(string managedXmlFilePath) {
            object[] results = this.Invoke("GetDbValues", new object[] {
                        managedXmlFilePath});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void GetDbValuesAsync(string managedXmlFilePath) {
            this.GetDbValuesAsync(managedXmlFilePath, null);
        }
        
        /// <remarks/>
        public void GetDbValuesAsync(string managedXmlFilePath, object userState) {
            if ((this.GetDbValuesOperationCompleted == null)) {
                this.GetDbValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDbValuesOperationCompleted);
            }
            this.InvokeAsync("GetDbValues", new object[] {
                        managedXmlFilePath}, this.GetDbValuesOperationCompleted, userState);
        }
        
        private void OnGetDbValuesOperationCompleted(object arg) {
            if ((this.GetDbValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDbValuesCompleted(this, new GetDbValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetDbValuesParams", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] GetDbValuesParams(string managedXmlFilePath, string[] dbParams) {
            object[] results = this.Invoke("GetDbValuesParams", new object[] {
                        managedXmlFilePath,
                        dbParams});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void GetDbValuesParamsAsync(string managedXmlFilePath, string[] dbParams) {
            this.GetDbValuesParamsAsync(managedXmlFilePath, dbParams, null);
        }
        
        /// <remarks/>
        public void GetDbValuesParamsAsync(string managedXmlFilePath, string[] dbParams, object userState) {
            if ((this.GetDbValuesParamsOperationCompleted == null)) {
                this.GetDbValuesParamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDbValuesParamsOperationCompleted);
            }
            this.InvokeAsync("GetDbValuesParams", new object[] {
                        managedXmlFilePath,
                        dbParams}, this.GetDbValuesParamsOperationCompleted, userState);
        }
        
        private void OnGetDbValuesParamsOperationCompleted(object arg) {
            if ((this.GetDbValuesParamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDbValuesParamsCompleted(this, new GetDbValuesParamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetDbValuesString", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] GetDbValuesString(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod) {
            object[] results = this.Invoke("GetDbValuesString", new object[] {
                        managedXmlFilePath,
                        parameterValues,
                        sqlAuthenticationMethod});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void GetDbValuesStringAsync(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod) {
            this.GetDbValuesStringAsync(managedXmlFilePath, parameterValues, sqlAuthenticationMethod, null);
        }
        
        /// <remarks/>
        public void GetDbValuesStringAsync(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod, object userState) {
            if ((this.GetDbValuesStringOperationCompleted == null)) {
                this.GetDbValuesStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDbValuesStringOperationCompleted);
            }
            this.InvokeAsync("GetDbValuesString", new object[] {
                        managedXmlFilePath,
                        parameterValues,
                        sqlAuthenticationMethod}, this.GetDbValuesStringOperationCompleted, userState);
        }
        
        private void OnGetDbValuesStringOperationCompleted(object arg) {
            if ((this.GetDbValuesStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDbValuesStringCompleted(this, new GetDbValuesStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetDbValuesStruct", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDbValuesStruct(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod) {
            object[] results = this.Invoke("GetDbValuesStruct", new object[] {
                        managedXmlFilePath,
                        parameterValues,
                        sqlAuthenticationMethod});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDbValuesStructAsync(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod) {
            this.GetDbValuesStructAsync(managedXmlFilePath, parameterValues, sqlAuthenticationMethod, null);
        }
        
        /// <remarks/>
        public void GetDbValuesStructAsync(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod, object userState) {
            if ((this.GetDbValuesStructOperationCompleted == null)) {
                this.GetDbValuesStructOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDbValuesStructOperationCompleted);
            }
            this.InvokeAsync("GetDbValuesStruct", new object[] {
                        managedXmlFilePath,
                        parameterValues,
                        sqlAuthenticationMethod}, this.GetDbValuesStructOperationCompleted, userState);
        }
        
        private void OnGetDbValuesStructOperationCompleted(object arg) {
            if ((this.GetDbValuesStructCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDbValuesStructCompleted(this, new GetDbValuesStructCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetDbValuesStructRecursive", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDbValuesStructRecursive(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod) {
            object[] results = this.Invoke("GetDbValuesStructRecursive", new object[] {
                        managedXmlFilePath,
                        parameterValues,
                        sqlAuthenticationMethod});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDbValuesStructRecursiveAsync(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod) {
            this.GetDbValuesStructRecursiveAsync(managedXmlFilePath, parameterValues, sqlAuthenticationMethod, null);
        }
        
        /// <remarks/>
        public void GetDbValuesStructRecursiveAsync(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod, object userState) {
            if ((this.GetDbValuesStructRecursiveOperationCompleted == null)) {
                this.GetDbValuesStructRecursiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDbValuesStructRecursiveOperationCompleted);
            }
            this.InvokeAsync("GetDbValuesStructRecursive", new object[] {
                        managedXmlFilePath,
                        parameterValues,
                        sqlAuthenticationMethod}, this.GetDbValuesStructRecursiveOperationCompleted, userState);
        }
        
        private void OnGetDbValuesStructRecursiveOperationCompleted(object arg) {
            if ((this.GetDbValuesStructRecursiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDbValuesStructRecursiveCompleted(this, new GetDbValuesStructRecursiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/ExcecuteSqlUpdateStatementReturnNumRows", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExcecuteSqlUpdateStatementReturnNumRows(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod) {
            object[] results = this.Invoke("ExcecuteSqlUpdateStatementReturnNumRows", new object[] {
                        managedXmlFilePath,
                        parameterValues,
                        sqlAuthenticationMethod});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExcecuteSqlUpdateStatementReturnNumRowsAsync(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod) {
            this.ExcecuteSqlUpdateStatementReturnNumRowsAsync(managedXmlFilePath, parameterValues, sqlAuthenticationMethod, null);
        }
        
        /// <remarks/>
        public void ExcecuteSqlUpdateStatementReturnNumRowsAsync(string managedXmlFilePath, string parameterValues, string sqlAuthenticationMethod, object userState) {
            if ((this.ExcecuteSqlUpdateStatementReturnNumRowsOperationCompleted == null)) {
                this.ExcecuteSqlUpdateStatementReturnNumRowsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExcecuteSqlUpdateStatementReturnNumRowsOperationCompleted);
            }
            this.InvokeAsync("ExcecuteSqlUpdateStatementReturnNumRows", new object[] {
                        managedXmlFilePath,
                        parameterValues,
                        sqlAuthenticationMethod}, this.ExcecuteSqlUpdateStatementReturnNumRowsOperationCompleted, userState);
        }
        
        private void OnExcecuteSqlUpdateStatementReturnNumRowsOperationCompleted(object arg) {
            if ((this.ExcecuteSqlUpdateStatementReturnNumRowsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExcecuteSqlUpdateStatementReturnNumRowsCompleted(this, new ExcecuteSqlUpdateStatementReturnNumRowsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetDbValuesStringRecursive", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] GetDbValuesStringRecursive(string managedXmlFilePath, string parameterValues) {
            object[] results = this.Invoke("GetDbValuesStringRecursive", new object[] {
                        managedXmlFilePath,
                        parameterValues});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void GetDbValuesStringRecursiveAsync(string managedXmlFilePath, string parameterValues) {
            this.GetDbValuesStringRecursiveAsync(managedXmlFilePath, parameterValues, null);
        }
        
        /// <remarks/>
        public void GetDbValuesStringRecursiveAsync(string managedXmlFilePath, string parameterValues, object userState) {
            if ((this.GetDbValuesStringRecursiveOperationCompleted == null)) {
                this.GetDbValuesStringRecursiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDbValuesStringRecursiveOperationCompleted);
            }
            this.InvokeAsync("GetDbValuesStringRecursive", new object[] {
                        managedXmlFilePath,
                        parameterValues}, this.GetDbValuesStringRecursiveOperationCompleted, userState);
        }
        
        private void OnGetDbValuesStringRecursiveOperationCompleted(object arg) {
            if ((this.GetDbValuesStringRecursiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDbValuesStringRecursiveCompleted(this, new GetDbValuesStringRecursiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetOleConnectionString", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOleConnectionString(string managedXmlFilePath) {
            object[] results = this.Invoke("GetOleConnectionString", new object[] {
                        managedXmlFilePath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOleConnectionStringAsync(string managedXmlFilePath) {
            this.GetOleConnectionStringAsync(managedXmlFilePath, null);
        }
        
        /// <remarks/>
        public void GetOleConnectionStringAsync(string managedXmlFilePath, object userState) {
            if ((this.GetOleConnectionStringOperationCompleted == null)) {
                this.GetOleConnectionStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOleConnectionStringOperationCompleted);
            }
            this.InvokeAsync("GetOleConnectionString", new object[] {
                        managedXmlFilePath}, this.GetOleConnectionStringOperationCompleted, userState);
        }
        
        private void OnGetOleConnectionStringOperationCompleted(object arg) {
            if ((this.GetOleConnectionStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOleConnectionStringCompleted(this, new GetOleConnectionStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetServerPathTest", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerPathTest() {
            object[] results = this.Invoke("GetServerPathTest", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerPathTestAsync() {
            this.GetServerPathTestAsync(null);
        }
        
        /// <remarks/>
        public void GetServerPathTestAsync(object userState) {
            if ((this.GetServerPathTestOperationCompleted == null)) {
                this.GetServerPathTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerPathTestOperationCompleted);
            }
            this.InvokeAsync("GetServerPathTest", new object[0], this.GetServerPathTestOperationCompleted, userState);
        }
        
        private void OnGetServerPathTestOperationCompleted(object arg) {
            if ((this.GetServerPathTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerPathTestCompleted(this, new GetServerPathTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GetClientUserName", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClientUserName() {
            object[] results = this.Invoke("GetClientUserName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientUserNameAsync() {
            this.GetClientUserNameAsync(null);
        }
        
        /// <remarks/>
        public void GetClientUserNameAsync(object userState) {
            if ((this.GetClientUserNameOperationCompleted == null)) {
                this.GetClientUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientUserNameOperationCompleted);
            }
            this.InvokeAsync("GetClientUserName", new object[0], this.GetClientUserNameOperationCompleted, userState);
        }
        
        private void OnGetClientUserNameOperationCompleted(object arg) {
            if ((this.GetClientUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientUserNameCompleted(this, new GetClientUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/CreateNotifictionMonitorListRecipient", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CreateNotifictionMonitorListRecipient(
                    bool monitorEnabled, 
                    string listPath, 
                    string libraryPath, 
                    string listName, 
                    string fileField, 
                    string camlQuery, 
                    string appQueryOptions, 
                    string appViewFields, 
                    string recipientColumnName, 
                    string recipientEmailSubject, 
                    string recipientEmailTitle, 
                    string recipientEmailSubTitle, 
                    string recipientEmailMessage, 
                    int msgTitleFontSize, 
                    bool msgTitleFontBold, 
                    bool msgTitleFontItalic, 
                    bool msgTitleFontUnderline, 
                    string msgTitleFontColour, 
                    int msgSubTitleFontSize, 
                    bool msgSubTitleFontBold, 
                    bool msgSubTitleFontItalilc, 
                    bool msgSubTitleFontUnderline, 
                    string msgSubTitleFontColour, 
                    int msgBodyFontSize, 
                    bool msgBodyFontBold, 
                    bool msgBodyFontItalic, 
                    bool msgBodyFontUnderline, 
                    string msgBodyFontColour, 
                    string configFilePath) {
            object[] results = this.Invoke("CreateNotifictionMonitorListRecipient", new object[] {
                        monitorEnabled,
                        listPath,
                        libraryPath,
                        listName,
                        fileField,
                        camlQuery,
                        appQueryOptions,
                        appViewFields,
                        recipientColumnName,
                        recipientEmailSubject,
                        recipientEmailTitle,
                        recipientEmailSubTitle,
                        recipientEmailMessage,
                        msgTitleFontSize,
                        msgTitleFontBold,
                        msgTitleFontItalic,
                        msgTitleFontUnderline,
                        msgTitleFontColour,
                        msgSubTitleFontSize,
                        msgSubTitleFontBold,
                        msgSubTitleFontItalilc,
                        msgSubTitleFontUnderline,
                        msgSubTitleFontColour,
                        msgBodyFontSize,
                        msgBodyFontBold,
                        msgBodyFontItalic,
                        msgBodyFontUnderline,
                        msgBodyFontColour,
                        configFilePath});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateNotifictionMonitorListRecipientAsync(
                    bool monitorEnabled, 
                    string listPath, 
                    string libraryPath, 
                    string listName, 
                    string fileField, 
                    string camlQuery, 
                    string appQueryOptions, 
                    string appViewFields, 
                    string recipientColumnName, 
                    string recipientEmailSubject, 
                    string recipientEmailTitle, 
                    string recipientEmailSubTitle, 
                    string recipientEmailMessage, 
                    int msgTitleFontSize, 
                    bool msgTitleFontBold, 
                    bool msgTitleFontItalic, 
                    bool msgTitleFontUnderline, 
                    string msgTitleFontColour, 
                    int msgSubTitleFontSize, 
                    bool msgSubTitleFontBold, 
                    bool msgSubTitleFontItalilc, 
                    bool msgSubTitleFontUnderline, 
                    string msgSubTitleFontColour, 
                    int msgBodyFontSize, 
                    bool msgBodyFontBold, 
                    bool msgBodyFontItalic, 
                    bool msgBodyFontUnderline, 
                    string msgBodyFontColour, 
                    string configFilePath) {
            this.CreateNotifictionMonitorListRecipientAsync(monitorEnabled, listPath, libraryPath, listName, fileField, camlQuery, appQueryOptions, appViewFields, recipientColumnName, recipientEmailSubject, recipientEmailTitle, recipientEmailSubTitle, recipientEmailMessage, msgTitleFontSize, msgTitleFontBold, msgTitleFontItalic, msgTitleFontUnderline, msgTitleFontColour, msgSubTitleFontSize, msgSubTitleFontBold, msgSubTitleFontItalilc, msgSubTitleFontUnderline, msgSubTitleFontColour, msgBodyFontSize, msgBodyFontBold, msgBodyFontItalic, msgBodyFontUnderline, msgBodyFontColour, configFilePath, null);
        }
        
        /// <remarks/>
        public void CreateNotifictionMonitorListRecipientAsync(
                    bool monitorEnabled, 
                    string listPath, 
                    string libraryPath, 
                    string listName, 
                    string fileField, 
                    string camlQuery, 
                    string appQueryOptions, 
                    string appViewFields, 
                    string recipientColumnName, 
                    string recipientEmailSubject, 
                    string recipientEmailTitle, 
                    string recipientEmailSubTitle, 
                    string recipientEmailMessage, 
                    int msgTitleFontSize, 
                    bool msgTitleFontBold, 
                    bool msgTitleFontItalic, 
                    bool msgTitleFontUnderline, 
                    string msgTitleFontColour, 
                    int msgSubTitleFontSize, 
                    bool msgSubTitleFontBold, 
                    bool msgSubTitleFontItalilc, 
                    bool msgSubTitleFontUnderline, 
                    string msgSubTitleFontColour, 
                    int msgBodyFontSize, 
                    bool msgBodyFontBold, 
                    bool msgBodyFontItalic, 
                    bool msgBodyFontUnderline, 
                    string msgBodyFontColour, 
                    string configFilePath, 
                    object userState) {
            if ((this.CreateNotifictionMonitorListRecipientOperationCompleted == null)) {
                this.CreateNotifictionMonitorListRecipientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNotifictionMonitorListRecipientOperationCompleted);
            }
            this.InvokeAsync("CreateNotifictionMonitorListRecipient", new object[] {
                        monitorEnabled,
                        listPath,
                        libraryPath,
                        listName,
                        fileField,
                        camlQuery,
                        appQueryOptions,
                        appViewFields,
                        recipientColumnName,
                        recipientEmailSubject,
                        recipientEmailTitle,
                        recipientEmailSubTitle,
                        recipientEmailMessage,
                        msgTitleFontSize,
                        msgTitleFontBold,
                        msgTitleFontItalic,
                        msgTitleFontUnderline,
                        msgTitleFontColour,
                        msgSubTitleFontSize,
                        msgSubTitleFontBold,
                        msgSubTitleFontItalilc,
                        msgSubTitleFontUnderline,
                        msgSubTitleFontColour,
                        msgBodyFontSize,
                        msgBodyFontBold,
                        msgBodyFontItalic,
                        msgBodyFontUnderline,
                        msgBodyFontColour,
                        configFilePath}, this.CreateNotifictionMonitorListRecipientOperationCompleted, userState);
        }
        
        private void OnCreateNotifictionMonitorListRecipientOperationCompleted(object arg) {
            if ((this.CreateNotifictionMonitorListRecipientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNotifictionMonitorListRecipientCompleted(this, new CreateNotifictionMonitorListRecipientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/CreateNotificationMonitorSpecifiedRecipient", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CreateNotificationMonitorSpecifiedRecipient(
                    bool monitorEnabled, 
                    string listPath, 
                    string libraryPath, 
                    string listName, 
                    string fileField, 
                    string camlQuery, 
                    string appQueryOptions, 
                    string appViewFields, 
                    string recipientName, 
                    string recipientEmailAddress, 
                    string recipientEmailSubject, 
                    string recipientEmailTitle, 
                    string recipientEmailSubTitle, 
                    string recipientEmailMessage, 
                    int msgTitleFontSize, 
                    bool msgTitleFontBold, 
                    bool msgTitleFontItalic, 
                    bool msgTitleFontUnderline, 
                    string msgTitleFontColour, 
                    int msgSubTitleFontSize, 
                    bool msgSubTitleFontBold, 
                    bool msgSubTitleFontItalic, 
                    bool msgSubTitleFontUnderline, 
                    string msgSubTitleFontColour, 
                    int msgBodyFontSize, 
                    bool msgBodyFontBold, 
                    bool msgBodyFontItalic, 
                    bool msgBodyFontUnderline, 
                    string msgBodyFontColour, 
                    string configFilePath) {
            object[] results = this.Invoke("CreateNotificationMonitorSpecifiedRecipient", new object[] {
                        monitorEnabled,
                        listPath,
                        libraryPath,
                        listName,
                        fileField,
                        camlQuery,
                        appQueryOptions,
                        appViewFields,
                        recipientName,
                        recipientEmailAddress,
                        recipientEmailSubject,
                        recipientEmailTitle,
                        recipientEmailSubTitle,
                        recipientEmailMessage,
                        msgTitleFontSize,
                        msgTitleFontBold,
                        msgTitleFontItalic,
                        msgTitleFontUnderline,
                        msgTitleFontColour,
                        msgSubTitleFontSize,
                        msgSubTitleFontBold,
                        msgSubTitleFontItalic,
                        msgSubTitleFontUnderline,
                        msgSubTitleFontColour,
                        msgBodyFontSize,
                        msgBodyFontBold,
                        msgBodyFontItalic,
                        msgBodyFontUnderline,
                        msgBodyFontColour,
                        configFilePath});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateNotificationMonitorSpecifiedRecipientAsync(
                    bool monitorEnabled, 
                    string listPath, 
                    string libraryPath, 
                    string listName, 
                    string fileField, 
                    string camlQuery, 
                    string appQueryOptions, 
                    string appViewFields, 
                    string recipientName, 
                    string recipientEmailAddress, 
                    string recipientEmailSubject, 
                    string recipientEmailTitle, 
                    string recipientEmailSubTitle, 
                    string recipientEmailMessage, 
                    int msgTitleFontSize, 
                    bool msgTitleFontBold, 
                    bool msgTitleFontItalic, 
                    bool msgTitleFontUnderline, 
                    string msgTitleFontColour, 
                    int msgSubTitleFontSize, 
                    bool msgSubTitleFontBold, 
                    bool msgSubTitleFontItalic, 
                    bool msgSubTitleFontUnderline, 
                    string msgSubTitleFontColour, 
                    int msgBodyFontSize, 
                    bool msgBodyFontBold, 
                    bool msgBodyFontItalic, 
                    bool msgBodyFontUnderline, 
                    string msgBodyFontColour, 
                    string configFilePath) {
            this.CreateNotificationMonitorSpecifiedRecipientAsync(monitorEnabled, listPath, libraryPath, listName, fileField, camlQuery, appQueryOptions, appViewFields, recipientName, recipientEmailAddress, recipientEmailSubject, recipientEmailTitle, recipientEmailSubTitle, recipientEmailMessage, msgTitleFontSize, msgTitleFontBold, msgTitleFontItalic, msgTitleFontUnderline, msgTitleFontColour, msgSubTitleFontSize, msgSubTitleFontBold, msgSubTitleFontItalic, msgSubTitleFontUnderline, msgSubTitleFontColour, msgBodyFontSize, msgBodyFontBold, msgBodyFontItalic, msgBodyFontUnderline, msgBodyFontColour, configFilePath, null);
        }
        
        /// <remarks/>
        public void CreateNotificationMonitorSpecifiedRecipientAsync(
                    bool monitorEnabled, 
                    string listPath, 
                    string libraryPath, 
                    string listName, 
                    string fileField, 
                    string camlQuery, 
                    string appQueryOptions, 
                    string appViewFields, 
                    string recipientName, 
                    string recipientEmailAddress, 
                    string recipientEmailSubject, 
                    string recipientEmailTitle, 
                    string recipientEmailSubTitle, 
                    string recipientEmailMessage, 
                    int msgTitleFontSize, 
                    bool msgTitleFontBold, 
                    bool msgTitleFontItalic, 
                    bool msgTitleFontUnderline, 
                    string msgTitleFontColour, 
                    int msgSubTitleFontSize, 
                    bool msgSubTitleFontBold, 
                    bool msgSubTitleFontItalic, 
                    bool msgSubTitleFontUnderline, 
                    string msgSubTitleFontColour, 
                    int msgBodyFontSize, 
                    bool msgBodyFontBold, 
                    bool msgBodyFontItalic, 
                    bool msgBodyFontUnderline, 
                    string msgBodyFontColour, 
                    string configFilePath, 
                    object userState) {
            if ((this.CreateNotificationMonitorSpecifiedRecipientOperationCompleted == null)) {
                this.CreateNotificationMonitorSpecifiedRecipientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNotificationMonitorSpecifiedRecipientOperationCompleted);
            }
            this.InvokeAsync("CreateNotificationMonitorSpecifiedRecipient", new object[] {
                        monitorEnabled,
                        listPath,
                        libraryPath,
                        listName,
                        fileField,
                        camlQuery,
                        appQueryOptions,
                        appViewFields,
                        recipientName,
                        recipientEmailAddress,
                        recipientEmailSubject,
                        recipientEmailTitle,
                        recipientEmailSubTitle,
                        recipientEmailMessage,
                        msgTitleFontSize,
                        msgTitleFontBold,
                        msgTitleFontItalic,
                        msgTitleFontUnderline,
                        msgTitleFontColour,
                        msgSubTitleFontSize,
                        msgSubTitleFontBold,
                        msgSubTitleFontItalic,
                        msgSubTitleFontUnderline,
                        msgSubTitleFontColour,
                        msgBodyFontSize,
                        msgBodyFontBold,
                        msgBodyFontItalic,
                        msgBodyFontUnderline,
                        msgBodyFontColour,
                        configFilePath}, this.CreateNotificationMonitorSpecifiedRecipientOperationCompleted, userState);
        }
        
        private void OnCreateNotificationMonitorSpecifiedRecipientOperationCompleted(object arg) {
            if ((this.CreateNotificationMonitorSpecifiedRecipientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNotificationMonitorSpecifiedRecipientCompleted(this, new CreateNotificationMonitorSpecifiedRecipientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/GenerateAccpacGLExportFile", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GenerateAccpacGLExportFile(string entityName, string fiscalYear, string period, string savePath, string databaseName, string strSQLCommand, string connectionString, bool isCalendarYear) {
            object[] results = this.Invoke("GenerateAccpacGLExportFile", new object[] {
                        entityName,
                        fiscalYear,
                        period,
                        savePath,
                        databaseName,
                        strSQLCommand,
                        connectionString,
                        isCalendarYear});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateAccpacGLExportFileAsync(string entityName, string fiscalYear, string period, string savePath, string databaseName, string strSQLCommand, string connectionString, bool isCalendarYear) {
            this.GenerateAccpacGLExportFileAsync(entityName, fiscalYear, period, savePath, databaseName, strSQLCommand, connectionString, isCalendarYear, null);
        }
        
        /// <remarks/>
        public void GenerateAccpacGLExportFileAsync(string entityName, string fiscalYear, string period, string savePath, string databaseName, string strSQLCommand, string connectionString, bool isCalendarYear, object userState) {
            if ((this.GenerateAccpacGLExportFileOperationCompleted == null)) {
                this.GenerateAccpacGLExportFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateAccpacGLExportFileOperationCompleted);
            }
            this.InvokeAsync("GenerateAccpacGLExportFile", new object[] {
                        entityName,
                        fiscalYear,
                        period,
                        savePath,
                        databaseName,
                        strSQLCommand,
                        connectionString,
                        isCalendarYear}, this.GenerateAccpacGLExportFileOperationCompleted, userState);
        }
        
        private void OnGenerateAccpacGLExportFileOperationCompleted(object arg) {
            if ((this.GenerateAccpacGLExportFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateAccpacGLExportFileCompleted(this, new GenerateAccpacGLExportFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal.atsna.atsauto.net/CreateSharepointListDirectories", RequestNamespace="http://atsportal.atsna.atsauto.net/", ResponseNamespace="http://atsportal.atsna.atsauto.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CreateSharepointListDirectories(System.Xml.XmlNode directoriesXmlDoc) {
            object[] results = this.Invoke("CreateSharepointListDirectories", new object[] {
                        directoriesXmlDoc});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSharepointListDirectoriesAsync(System.Xml.XmlNode directoriesXmlDoc) {
            this.CreateSharepointListDirectoriesAsync(directoriesXmlDoc, null);
        }
        
        /// <remarks/>
        public void CreateSharepointListDirectoriesAsync(System.Xml.XmlNode directoriesXmlDoc, object userState) {
            if ((this.CreateSharepointListDirectoriesOperationCompleted == null)) {
                this.CreateSharepointListDirectoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSharepointListDirectoriesOperationCompleted);
            }
            this.InvokeAsync("CreateSharepointListDirectories", new object[] {
                        directoriesXmlDoc}, this.CreateSharepointListDirectoriesOperationCompleted, userState);
        }
        
        private void OnCreateSharepointListDirectoriesOperationCompleted(object arg) {
            if ((this.CreateSharepointListDirectoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSharepointListDirectoriesCompleted(this, new CreateSharepointListDirectoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://atsportal.atsna.atsauto.net/")]
    public partial class SupportNetTicket {
        
        private string ticketTitleField;
        
        private string ticketDescriptionField;
        
        private string requestCompleteDateField;
        
        private string requestedPriorityField;
        
        private string issueTypeField;
        
        private string issueSubtypeField;
        
        private string reqOnbehalfOfField;
        
        private string formXMLField;
        
        private string formNameField;
        
        /// <remarks/>
        public string TicketTitle {
            get {
                return this.ticketTitleField;
            }
            set {
                this.ticketTitleField = value;
            }
        }
        
        /// <remarks/>
        public string TicketDescription {
            get {
                return this.ticketDescriptionField;
            }
            set {
                this.ticketDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string RequestCompleteDate {
            get {
                return this.requestCompleteDateField;
            }
            set {
                this.requestCompleteDateField = value;
            }
        }
        
        /// <remarks/>
        public string RequestedPriority {
            get {
                return this.requestedPriorityField;
            }
            set {
                this.requestedPriorityField = value;
            }
        }
        
        /// <remarks/>
        public string IssueType {
            get {
                return this.issueTypeField;
            }
            set {
                this.issueTypeField = value;
            }
        }
        
        /// <remarks/>
        public string IssueSubtype {
            get {
                return this.issueSubtypeField;
            }
            set {
                this.issueSubtypeField = value;
            }
        }
        
        /// <remarks/>
        public string ReqOnbehalfOf {
            get {
                return this.reqOnbehalfOfField;
            }
            set {
                this.reqOnbehalfOfField = value;
            }
        }
        
        /// <remarks/>
        public string FormXML {
            get {
                return this.formXMLField;
            }
            set {
                this.formXMLField = value;
            }
        }
        
        /// <remarks/>
        public string FormName {
            get {
                return this.formNameField;
            }
            set {
                this.formNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void IsUserInMossGroupCompletedEventHandler(object sender, IsUserInMossGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserInMossGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserInMossGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SVIsUserInMossGroupCompletedEventHandler(object sender, SVIsUserInMossGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SVIsUserInMossGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SVIsUserInMossGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SVIsUserGroupMemberCompletedEventHandler(object sender, SVIsUserGroupMemberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SVIsUserGroupMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SVIsUserGroupMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SVGetSingleUserPropertyCompletedEventHandler(object sender, SVGetSingleUserPropertyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SVGetSingleUserPropertyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SVGetSingleUserPropertyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SVGetPropertyByAccountIDCompletedEventHandler(object sender, SVGetPropertyByAccountIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SVGetPropertyByAccountIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SVGetPropertyByAccountIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SVAddUserToSPGroupCompletedEventHandler(object sender, SVAddUserToSPGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SVAddUserToSPGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SVAddUserToSPGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateSupportnetTicketCompletedEventHandler(object sender, CreateSupportnetTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSupportnetTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSupportnetTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateSupportnetTicketWithParametersCompletedEventHandler(object sender, CreateSupportnetTicketWithParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSupportnetTicketWithParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSupportnetTicketWithParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateDirectoryCompletedEventHandler(object sender, CreateDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UpdateListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DecryptTextCompletedEventHandler(object sender, DecryptTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecryptTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecryptTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void EncryptTextCompletedEventHandler(object sender, EncryptTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetXmlStringCompletedEventHandler(object sender, GetXmlStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXmlStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXmlStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetStatementCompletedEventHandler(object sender, GetStatementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDbValuesCompletedEventHandler(object sender, GetDbValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDbValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDbValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDbValuesParamsCompletedEventHandler(object sender, GetDbValuesParamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDbValuesParamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDbValuesParamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDbValuesStringCompletedEventHandler(object sender, GetDbValuesStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDbValuesStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDbValuesStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDbValuesStructCompletedEventHandler(object sender, GetDbValuesStructCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDbValuesStructCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDbValuesStructCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDbValuesStructRecursiveCompletedEventHandler(object sender, GetDbValuesStructRecursiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDbValuesStructRecursiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDbValuesStructRecursiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ExcecuteSqlUpdateStatementReturnNumRowsCompletedEventHandler(object sender, ExcecuteSqlUpdateStatementReturnNumRowsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExcecuteSqlUpdateStatementReturnNumRowsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExcecuteSqlUpdateStatementReturnNumRowsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDbValuesStringRecursiveCompletedEventHandler(object sender, GetDbValuesStringRecursiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDbValuesStringRecursiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDbValuesStringRecursiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetOleConnectionStringCompletedEventHandler(object sender, GetOleConnectionStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOleConnectionStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOleConnectionStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetServerPathTestCompletedEventHandler(object sender, GetServerPathTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerPathTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerPathTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetClientUserNameCompletedEventHandler(object sender, GetClientUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateNotifictionMonitorListRecipientCompletedEventHandler(object sender, CreateNotifictionMonitorListRecipientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNotifictionMonitorListRecipientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNotifictionMonitorListRecipientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateNotificationMonitorSpecifiedRecipientCompletedEventHandler(object sender, CreateNotificationMonitorSpecifiedRecipientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNotificationMonitorSpecifiedRecipientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNotificationMonitorSpecifiedRecipientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GenerateAccpacGLExportFileCompletedEventHandler(object sender, GenerateAccpacGLExportFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateAccpacGLExportFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateAccpacGLExportFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateSharepointListDirectoriesCompletedEventHandler(object sender, CreateSharepointListDirectoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSharepointListDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSharepointListDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591