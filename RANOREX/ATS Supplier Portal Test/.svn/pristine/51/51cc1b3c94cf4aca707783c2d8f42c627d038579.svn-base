///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ATS_Supplier_Portal_Test
{
    public partial class SubmitQuote2
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ClickPromiseDate()
        {
        	repo.LoginATSSupplierPortal.BtnSetPromise.PerformClick();
        }

        public void SetPrices(string NumEntries)
        {
           
			WebDocument webDoc = "/dom[@domain='ca10a2061.atsna.atsauto.net']";
			var webTable = webDoc.FindSingle(".//table[#'detailsTable']");
		//	var inputTag = webTable.FindSingle(".//input[@name='[0].DetailCost' and @visible='True']").As<InputTag>();
		//	Report.Info(inputTag.Id);
			
			for (int i = 0; i < Convert.ToInt32(NumEntries); i++) 
			{
				//string rxPath = ".//input[@visible='True' and @name='[" + i.ToString() + "].DetailCost']";
				string rxPath = ".//input[@name='[" + i.ToString() + "].DetailCost' and @type='text']";
				var iTag = webTable.FindSingle(rxPath).As<InputTag>();
				if(!iTag.Visible)
				{
					Report.Info("Element not visible...pressing PageDown");
					Keyboard.Press("{PageDown}{PageDown}");
				}
				iTag.MoveTo();
				iTag.Click();
				
				if(i%2 == 0)
				{
				//	iTag.InnerText = "1.00";
					Keyboard.Press("1.00");
				}
				else
				{
				//	iTag.InnerText = (100*i).ToString() + ".00";
					Keyboard.Press((100*i).ToString() + ".00");
				}
				string notesRxPath = "./tbody/tr[" + (i+1).ToString() + "]/td/textarea";
				var NotesTextArea = webTable.FindSingle(notesRxPath).As<TextAreaTag>();
				if (i==1 || i==2 || i==3)
				{
					NotesTextArea.Click();
					NotesTextArea.InnerText = "Here is Note number " + i.ToString();
				}
			}
        }

        public void ClickButtonSubmit()
        {
        	Report.Info("Clicking Submit Button...");
        	repo.LoginATSSupplierPortal.BtnSubmit.PerformClick();
        	Report.Info("Submit Button Clicked");
        }

    }
}
