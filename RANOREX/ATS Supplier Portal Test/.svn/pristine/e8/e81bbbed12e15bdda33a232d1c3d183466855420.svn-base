///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ATS_Supplier_Portal_Test
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The FilterDetails recording.
    /// </summary>
    [TestModule("bf504755-4c08-4028-b94f-e2907fa1361e", ModuleType.Recording, 1)]
    public partial class FilterDetails : ITestModule
    {
        /// <summary>
        /// Holds an instance of the ATS_Supplier_Portal_TestRepository repository.
        /// </summary>
        public static ATS_Supplier_Portal_TestRepository repo = ATS_Supplier_Portal_TestRepository.Instance;

        static FilterDetails instance = new FilterDetails();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public FilterDetails()
        {
            valueOfCell = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static FilterDetails Instance
        {
            get { return instance; }
        }

#region Variables

        string _valueOfCell;

        /// <summary>
        /// Gets or sets the value of variable valueOfCell.
        /// </summary>
        [TestVariable("aa5bee38-3356-4a8d-a32d-18df1383c232")]
        public string valueOfCell
        {
            get { return _valueOfCell; }
            set { _valueOfCell = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.NavigationPanel.CreateRFQ' at Center.", repo.MainWindow.NavigationPanel.CreateRFQInfo, new RecordItemIndex(0));
            repo.MainWindow.NavigationPanel.CreateRFQ.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to not exist. Associated repository item: 'MainWindow.BusyOverlay'", repo.MainWindow.BusyOverlayInfo, new ActionTimeout(60000), new RecordItemIndex(1));
            repo.MainWindow.BusyOverlayInfo.WaitForNotExists(60000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.NavigationPanel.DetailsInBatch' at Center.", repo.MainWindow.NavigationPanel.DetailsInBatchInfo, new RecordItemIndex(2));
            repo.MainWindow.NavigationPanel.DetailsInBatch.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.NavigationPanel.DetailsFilter' at Center.", repo.MainWindow.NavigationPanel.DetailsFilterInfo, new RecordItemIndex(3));
            repo.MainWindow.NavigationPanel.DetailsFilter.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '100037440' with focus on 'MainWindow.NavigationPanel.DetailsFilter'.", repo.MainWindow.NavigationPanel.DetailsFilterInfo, new RecordItemIndex(4));
            repo.MainWindow.NavigationPanel.DetailsFilter.PressKeys("100037440");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'MainWindow.NavigationPanel.DetailsFilter' and assigning its value to variable 'valueOfCell'.", repo.MainWindow.NavigationPanel.DetailsFilterInfo, new RecordItemIndex(5));
            valueOfCell = repo.MainWindow.NavigationPanel.DetailsFilter.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            SPCollection.FilterValidate("Detail", valueOfCell, ValueConverter.ArgumentFromString<bool>("compareComboBox", "False"));
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.MainWindow.NavigationPanel.tabPageList, false, new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.NavigationPanel.TextClearAllFilters' at Center.", repo.MainWindow.NavigationPanel.TextClearAllFiltersInfo, new RecordItemIndex(8));
            repo.MainWindow.NavigationPanel.TextClearAllFilters.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='(null)') on item 'MainWindow.NavigationPanel.DetailsFilter'.", repo.MainWindow.NavigationPanel.DetailsFilterInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.MainWindow.NavigationPanel.DetailsFilterInfo, "Text", (string)null);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.NavigationPanel.DescriptionFilter' at Center.", repo.MainWindow.NavigationPanel.DescriptionFilterInfo, new RecordItemIndex(10));
            repo.MainWindow.NavigationPanel.DescriptionFilter.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'enclosure' with focus on 'MainWindow.NavigationPanel.DescriptionFilter'.", repo.MainWindow.NavigationPanel.DescriptionFilterInfo, new RecordItemIndex(11));
            repo.MainWindow.NavigationPanel.DescriptionFilter.PressKeys("enclosure");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'MainWindow.NavigationPanel.DescriptionFilter' and assigning its value to variable 'valueOfCell'.", repo.MainWindow.NavigationPanel.DescriptionFilterInfo, new RecordItemIndex(12));
            valueOfCell = repo.MainWindow.NavigationPanel.DescriptionFilter.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            SPCollection.FilterValidate("Description", valueOfCell, ValueConverter.ArgumentFromString<bool>("compareComboBox", "False"));
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.MainWindow.NavigationPanel.tabPageList, false, new RecordItemIndex(14));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.NavigationPanel.TextClearAllFilters' at Center.", repo.MainWindow.NavigationPanel.TextClearAllFiltersInfo, new RecordItemIndex(15));
            repo.MainWindow.NavigationPanel.TextClearAllFilters.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='(null)') on item 'MainWindow.NavigationPanel.DescriptionFilter'.", repo.MainWindow.NavigationPanel.DescriptionFilterInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.MainWindow.NavigationPanel.DescriptionFilterInfo, "Text", (string)null);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.NavigationPanel.ATSOrigPromDateFrom' at Center.", repo.MainWindow.NavigationPanel.ATSOrigPromDateFromInfo, new RecordItemIndex(17));
            repo.MainWindow.NavigationPanel.ATSOrigPromDateFrom.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '01/01/25' with focus on 'MainWindow.NavigationPanel.ATSOrigPromDateFrom'.", repo.MainWindow.NavigationPanel.ATSOrigPromDateFromInfo, new RecordItemIndex(18));
            repo.MainWindow.NavigationPanel.ATSOrigPromDateFrom.PressKeys("01/01/25");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.NavigationPanel.ATSOrigPromDateTo' at Center.", repo.MainWindow.NavigationPanel.ATSOrigPromDateToInfo, new RecordItemIndex(19));
            repo.MainWindow.NavigationPanel.ATSOrigPromDateTo.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '01/15/25' with focus on 'MainWindow.NavigationPanel.ATSOrigPromDateTo'.", repo.MainWindow.NavigationPanel.ATSOrigPromDateToInfo, new RecordItemIndex(20));
            repo.MainWindow.NavigationPanel.ATSOrigPromDateTo.PressKeys("01/15/25");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(21));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'MainWindow.NavigationPanel.ATSOrigPromDateTo' and assigning its value to variable 'valueOfCell'.", repo.MainWindow.NavigationPanel.ATSOrigPromDateToInfo, new RecordItemIndex(22));
            valueOfCell = repo.MainWindow.NavigationPanel.ATSOrigPromDateTo.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            //SPCollection.FilterValidate("ATS Request Date", valueOfCell, ValueConverter.ArgumentFromString<bool>("compareComboBox", "False"));
            //Delay.Milliseconds(0);
            
            SPCollection.FilterValidateDateTimeText("ATS-Orig Prom Date", valueOfCell);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.MainWindow.NavigationPanel.tabPageList, false, new RecordItemIndex(25));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
