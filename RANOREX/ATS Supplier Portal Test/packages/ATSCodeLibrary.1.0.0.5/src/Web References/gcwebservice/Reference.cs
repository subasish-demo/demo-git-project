//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ATS.CodeLibrary.gcwebservice {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ATSGlobalCatalogQuerySoap", Namespace="http://atsportal/")]
    public partial class ATSGlobalCatalogQuery : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsUserGroupMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleUserPropertyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyByAccountIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyByAccountIDCurrentContextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDomainNameOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ATSGlobalCatalogQuery() {
            this.Url = global::ATS.CodeLibrary.Properties.Settings.Default.ATSCodeLibrary_gcwebservice_ATSGlobalCatalogQuery;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsUserGroupMemberCompletedEventHandler IsUserGroupMemberCompleted;
        
        /// <remarks/>
        public event GetSingleUserPropertyCompletedEventHandler GetSingleUserPropertyCompleted;
        
        /// <remarks/>
        public event GetPropertyByAccountIDCompletedEventHandler GetPropertyByAccountIDCompleted;
        
        /// <remarks/>
        public event GetPropertyByAccountIDCurrentContextCompletedEventHandler GetPropertyByAccountIDCurrentContextCompleted;
        
        /// <remarks/>
        public event GetUserDomainNameCompletedEventHandler GetUserDomainNameCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal/IsUserGroupMember", RequestNamespace="http://atsportal/", ResponseNamespace="http://atsportal/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsUserGroupMember(string emailAddress, string groupName, string userName) {
            object[] results = this.Invoke("IsUserGroupMember", new object[] {
                        emailAddress,
                        groupName,
                        userName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsUserGroupMemberAsync(string emailAddress, string groupName, string userName) {
            this.IsUserGroupMemberAsync(emailAddress, groupName, userName, null);
        }
        
        /// <remarks/>
        public void IsUserGroupMemberAsync(string emailAddress, string groupName, string userName, object userState) {
            if ((this.IsUserGroupMemberOperationCompleted == null)) {
                this.IsUserGroupMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserGroupMemberOperationCompleted);
            }
            this.InvokeAsync("IsUserGroupMember", new object[] {
                        emailAddress,
                        groupName,
                        userName}, this.IsUserGroupMemberOperationCompleted, userState);
        }
        
        private void OnIsUserGroupMemberOperationCompleted(object arg) {
            if ((this.IsUserGroupMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserGroupMemberCompleted(this, new IsUserGroupMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal/GetSingleUserProperty", RequestNamespace="http://atsportal/", ResponseNamespace="http://atsportal/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSingleUserProperty(string emailAddress, string userName, string propertyName) {
            object[] results = this.Invoke("GetSingleUserProperty", new object[] {
                        emailAddress,
                        userName,
                        propertyName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleUserPropertyAsync(string emailAddress, string userName, string propertyName) {
            this.GetSingleUserPropertyAsync(emailAddress, userName, propertyName, null);
        }
        
        /// <remarks/>
        public void GetSingleUserPropertyAsync(string emailAddress, string userName, string propertyName, object userState) {
            if ((this.GetSingleUserPropertyOperationCompleted == null)) {
                this.GetSingleUserPropertyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleUserPropertyOperationCompleted);
            }
            this.InvokeAsync("GetSingleUserProperty", new object[] {
                        emailAddress,
                        userName,
                        propertyName}, this.GetSingleUserPropertyOperationCompleted, userState);
        }
        
        private void OnGetSingleUserPropertyOperationCompleted(object arg) {
            if ((this.GetSingleUserPropertyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleUserPropertyCompleted(this, new GetSingleUserPropertyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal/GetPropertyByAccountID", RequestNamespace="http://atsportal/", ResponseNamespace="http://atsportal/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPropertyByAccountID(string accountID, string propertyName) {
            object[] results = this.Invoke("GetPropertyByAccountID", new object[] {
                        accountID,
                        propertyName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyByAccountIDAsync(string accountID, string propertyName) {
            this.GetPropertyByAccountIDAsync(accountID, propertyName, null);
        }
        
        /// <remarks/>
        public void GetPropertyByAccountIDAsync(string accountID, string propertyName, object userState) {
            if ((this.GetPropertyByAccountIDOperationCompleted == null)) {
                this.GetPropertyByAccountIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyByAccountIDOperationCompleted);
            }
            this.InvokeAsync("GetPropertyByAccountID", new object[] {
                        accountID,
                        propertyName}, this.GetPropertyByAccountIDOperationCompleted, userState);
        }
        
        private void OnGetPropertyByAccountIDOperationCompleted(object arg) {
            if ((this.GetPropertyByAccountIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyByAccountIDCompleted(this, new GetPropertyByAccountIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal/GetPropertyByAccountIDCurrentContext", RequestNamespace="http://atsportal/", ResponseNamespace="http://atsportal/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPropertyByAccountIDCurrentContext(string propertyName) {
            object[] results = this.Invoke("GetPropertyByAccountIDCurrentContext", new object[] {
                        propertyName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyByAccountIDCurrentContextAsync(string propertyName) {
            this.GetPropertyByAccountIDCurrentContextAsync(propertyName, null);
        }
        
        /// <remarks/>
        public void GetPropertyByAccountIDCurrentContextAsync(string propertyName, object userState) {
            if ((this.GetPropertyByAccountIDCurrentContextOperationCompleted == null)) {
                this.GetPropertyByAccountIDCurrentContextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyByAccountIDCurrentContextOperationCompleted);
            }
            this.InvokeAsync("GetPropertyByAccountIDCurrentContext", new object[] {
                        propertyName}, this.GetPropertyByAccountIDCurrentContextOperationCompleted, userState);
        }
        
        private void OnGetPropertyByAccountIDCurrentContextOperationCompleted(object arg) {
            if ((this.GetPropertyByAccountIDCurrentContextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyByAccountIDCurrentContextCompleted(this, new GetPropertyByAccountIDCurrentContextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://atsportal/GetUserDomainName", RequestNamespace="http://atsportal/", ResponseNamespace="http://atsportal/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserDomainName(string emailAddress, string userName) {
            object[] results = this.Invoke("GetUserDomainName", new object[] {
                        emailAddress,
                        userName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDomainNameAsync(string emailAddress, string userName) {
            this.GetUserDomainNameAsync(emailAddress, userName, null);
        }
        
        /// <remarks/>
        public void GetUserDomainNameAsync(string emailAddress, string userName, object userState) {
            if ((this.GetUserDomainNameOperationCompleted == null)) {
                this.GetUserDomainNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDomainNameOperationCompleted);
            }
            this.InvokeAsync("GetUserDomainName", new object[] {
                        emailAddress,
                        userName}, this.GetUserDomainNameOperationCompleted, userState);
        }
        
        private void OnGetUserDomainNameOperationCompleted(object arg) {
            if ((this.GetUserDomainNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDomainNameCompleted(this, new GetUserDomainNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void IsUserGroupMemberCompletedEventHandler(object sender, IsUserGroupMemberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserGroupMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserGroupMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetSingleUserPropertyCompletedEventHandler(object sender, GetSingleUserPropertyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleUserPropertyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleUserPropertyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPropertyByAccountIDCompletedEventHandler(object sender, GetPropertyByAccountIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyByAccountIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyByAccountIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPropertyByAccountIDCurrentContextCompletedEventHandler(object sender, GetPropertyByAccountIDCurrentContextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyByAccountIDCurrentContextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyByAccountIDCurrentContextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetUserDomainNameCompletedEventHandler(object sender, GetUserDomainNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDomainNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDomainNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591