///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.IO;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ATS_Supplier_Portal_Test
{
    public partial class SearchJDEforCancelledLines
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidateFileExistsinTableSetter(string FileName, string FileDirectory)
        {
        	FileName = FileName.Substring(0, FileName.LastIndexOf("."));
        	if(Directory.Exists(@FileDirectory))
        	{
        		bool flag = false;
        		var filesinDir = Directory.GetFiles(@FileDirectory);
        		foreach (var filename in filesinDir) 
        		{
        			var fname = Path.GetFileNameWithoutExtension(filename);
        			if (fname.Contains(FileName))
        			{
        				Ranorex.Validate.IsTrue(fname.Contains(FileName), "Validation @ValidateRESULT@! " + fname + " found in directory: " + FileDirectory + " contains " + FileName);
        				flag = true;
        			}
        		
        		}
        		
        		if (!flag)
        		{
        			Ranorex.Validate.Fail("FileName(s) in Directory: " + FileDirectory + " do NOT contain File name of cell: " + FileName + " the validation FAILED");
        		}
        		
        		System.Diagnostics.Process.Start(@FileDirectory);
        		Delay.Seconds(2.0);
        		Report.Screenshot(repo.Form10784.Self);
        		Delay.Seconds(2.0);
        		repo.Form10784.Self.Close();
        	}
        	else
        	{
        		Ranorex.Validate.Fail("Unable to find directory: " + FileDirectory);
        	}
        }

        public void ValidateLedgerTableEntries(string orderNumber, string lineNumber, string userName, string buyerNumber)
        {
        	try 
        	{
        		var xmlFilePath = @"\\ca01a9001\pgmis\Deployment_DEV\Ranorex\Supplier_Portal\JDE\SQLLedgerTableResultsCancelledItem.xml";
        		var lineNumberConverted = Convert.ToDecimal(lineNumber) * 1000;
        		var converted = Convert.ToInt32(lineNumberConverted);
        		var table = SPCollection.SQLQueryJDEDevLedgerTable(orderNumber, converted.ToString(), userName);
        		table.WriteXml(xmlFilePath);
        		Report.Info("Querying JDE ledger table F43199 with Ordernumber: " + orderNumber + " and linenumber: " + lineNumber + " to see if user: " + userName + " has entries for buyernumber: " + buyerNumber + " for todays date and next status of 999 and last status of 980");
        		Report.Info("Wrote SQL Query results to xml file: " + xmlFilePath + ".  Please see results there if any errors.");
        		Ranorex.Validate.IsTrue(table.Rows[0][0].ToString().Contains(userName), "Validating the JDE ledger table F43199 contains username: " + userName + " for this line item.  The validation @ValidateRESULT@!");
        		var todaysDate = System.DateTime.Today.ToString("MM-dd-yyyy");
        		Ranorex.Validate.IsTrue(todaysDate == table.Rows[0][1].ToString(), "Validating the date created entry of the line item in the JDE ledger table F43199 is today's date, date created: " + table.Rows[0][1].ToString() + ".  The Validation @ValidateRESULT@!");
        		Ranorex.Validate.IsTrue(buyerNumber == table.Rows[0][2].ToString(), "Validating the buyer number of the JDE ledger table F43199 line item is " + buyerNumber + ".  The validation @ValidateRESULT@!");
        		Ranorex.Validate.IsTrue("999" == table.Rows[0][3].ToString(), "Validating Next Status is 999 of the JDE ledger table F43199 line item.  The validation @ValidateRESULT@!");
				Ranorex.Validate.IsTrue("980" == table.Rows[0][4].ToString(), "Validating Last Status is 980 of the JDE ledger table F43199 line item.  The validation @ValidateRESULT@!"); 
        	} 
        	catch (Exception) 
        	{
        		bool result = SPCollection.CheckForJDELedgerTableErrorActiveMQ(orderNumber, lineNumber);
        		if (result)
        		{
        			Report.Warn("Error: Did not find any results for JDE query to see if JDE ledger table F43199 contains username: " + userName + " for this line item, but the line item EXISTS in the Active MQ Error Queue. PLEASE REPROCESS.");
        		}
        		else
        		{
        			Report.Warn("ERROR: Unable to find JDE Ledger table entry for table F43199 which contains username: " + userName + " and there is NO ENTRY in the Active MQ Error Queue for this odernumber: " + orderNumber + " and Line Number: " + lineNumber);
        		}
        		
        	}
        }

    }
}
