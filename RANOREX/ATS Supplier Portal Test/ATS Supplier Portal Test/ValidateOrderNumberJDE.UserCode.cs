///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using ATS.CodeLibrary.DataUtilities.Cryptography;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ATS_Supplier_Portal_Test
{
    public partial class ValidateOrderNumberJDE
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void test()
        {
        	Report.Info(CryptographyHelper.EncryptString("!Pr0ject"));
        	
        }

        public void ValidateNumRecords()
        {
        	Ranorex.Validate.IsTrue(varNumRecords == varNumEntries, "Checking to see if Number of Records match from JDE: " + varNumRecords + " and Supplier portal: " + varNumEntries + " , the validation @ValidateRESULT@!");
        }

        public void ValidateOXClosedinJDELedgerTable(string OrderNumber, string LineNumber, string userName, string buyerNumber)
        {
            try 
        	{
        		var xmlFilePath = @"\\ca01a9001\pgmis\Deployment_DEV\Ranorex\Supplier_Portal\JDE\SQLLedgerTableResultsClosedItem.xml";
        		var lineNumberConverted = Convert.ToDecimal(LineNumber) * 1000;
        		var converted = Convert.ToInt32(lineNumberConverted);
        		var table = SPCollection.SQLQueryJDEDevLedgerTable(OrderNumber, converted.ToString(), userName);
        		table.WriteXml(xmlFilePath);
        		Report.Info("Querying JDE ledger table F43199 with Ordernumber: " + OrderNumber + " and linenumber: " + LineNumber + " to see if user: " + userName + " has entries for buyernumber: " + buyerNumber + " for todays date and next status of 999 and last status of 120");
        		Report.Info("Wrote SQL Query results to xml file: " + xmlFilePath + ".  Please see results there if any errors.");
        		Report.Info("Result for table.Rows[2][0,1,2,3,4]: " + table.Rows[2][0].ToString() + " " + table.Rows[2][1].ToString() + " " + table.Rows[2][2].ToString() + " " + table.Rows[2][3].ToString() + " " + table.Rows[2][4].ToString());
        		Ranorex.Validate.IsTrue(table.Rows[2][0].ToString().Contains(userName), "Validating the JDE ledger table F43199 contains username: " + userName + " for this line item.  The validation @ValidateRESULT@!");
        		var todaysDate = System.DateTime.Today.ToString("MM-dd-yyyy");
        		Ranorex.Validate.IsTrue(todaysDate == table.Rows[2][1].ToString(), "Validating the date created entry of the line item in the JDE ledger table F43199 is today's date, date created: " + table.Rows[0][1].ToString() + ".  The Validation @ValidateRESULT@!");
        		Ranorex.Validate.IsTrue(buyerNumber == table.Rows[2][2].ToString(), "Validating the buyer number of the JDE ledger table F43199 line item is " + buyerNumber + ".  The validation @ValidateRESULT@!");
        		Ranorex.Validate.IsTrue("999" == table.Rows[2][3].ToString(), "Validating Next Status is 999 of the JDE ledger table F43199 line item.  The validation @ValidateRESULT@!");
				Ranorex.Validate.IsTrue("120" == table.Rows[2][4].ToString(), "Validating Last Status is 980 of the JDE ledger table F43199 line item.  The validation @ValidateRESULT@!"); 
        	} 
        	catch (Exception) 
        	{
        		bool result = SPCollection.CheckForJDELedgerTableErrorActiveMQ(OrderNumber, LineNumber);
        		if (result)
        		{
        			Report.Warn("Error: Did not find any results for JDE query to see if JDE ledger table F43199 contains username: " + userName + " for this line item, but the line item EXISTS in the Active MQ Error Queue. PLEASE REPROCESS.");
        		}
        		else
        		{
        			Report.Warn("ERROR: Unable to find JDE Ledger table entry for table F43199 which contains username: " + userName + " and there is NO ENTRY in the Active MQ Error Queue for this odernumber: " + OrderNumber + " and Line Number: " + LineNumber);
        		}
        		
        	}
        }

        public void ShortenShippingMethod()
        {
            varShippingMethod = varShippingMethod.Substring(0, varShippingMethod.IndexOf("-")).Trim();
            Report.Info("Shortened Shipping Method is: " + varShippingMethod);
        }

    }
}
