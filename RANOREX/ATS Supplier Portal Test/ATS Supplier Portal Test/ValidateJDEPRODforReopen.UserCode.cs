///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.IO;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ATS_Supplier_Portal_Test
{
    public partial class ValidateJDEPRODforReopen
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidateFileExistsinTableSetter(string FileName, string FileDirectory)
        {
        	FileName = FileName.Substring(0, FileName.LastIndexOf("."));
        	if(Directory.Exists(@FileDirectory))
        	{
        		bool flag = false;
        		var filesinDir = Directory.GetFiles(@FileDirectory);
        		foreach (var filename in filesinDir) 
        		{
        			var fname = Path.GetFileNameWithoutExtension(filename);
        			if (fname.Contains(FileName))
        			{
        				Ranorex.Validate.IsTrue(fname.Contains(FileName), "Validation @ValidateRESULT@! " + fname + " found in directory: " + FileDirectory + " contains " + FileName);
        				flag = true;
        			}
        		
        		}
        		
        		if (!flag)
        		{
        			Ranorex.Validate.Fail("FileName(s) in Directory: " + FileDirectory + " do NOT contain File name of cell: " + FileName + " the validation FAILED");
        		}
        		
        		System.Diagnostics.Process.Start(@FileDirectory);
        		Delay.Seconds(2.0);
        		Report.Screenshot(repo.Form99509.Self);
        		Delay.Seconds(2.0);
        		repo.Form99509.Self.Close();
        	}
        	else
        	{
        		Ranorex.Validate.Fail("Unable to find directory: " + FileDirectory);
        	}
        }

        public void CheckLastRowStatus(string userRef, string supplierSo, string quantity, int timeoutMinutes)
        {
	
        	int timeoutSeconds = timeoutMinutes * 60;
        	int checkInterval = 60;
        	int totalTimeout = timeoutSeconds/checkInterval;
        	int i = 0;
        	string result = "";
        	Report.Info("Searching JDE for Last Status = 110, this search will timeout in " + timeoutMinutes.ToString() + " minutes!");
            do
            {
            	Report.Info("Time Remaining: " + (timeoutMinutes - i).ToString() + " minutes");
            	Delay.Seconds(Convert.ToDouble(checkInterval));
            	result = SPCollection.SQLQueryJDELastStatus(userRef,supplierSo,quantity,true);
            	if(result == "110")
            	{
            		Report.Info("Result of 110 found!");
            	}
            	else
            	{
            		Report.Info("Result not found in JDE, retrying in 1 minute...");
            	}
            	i++;
            } while (result != "110"  && i < totalTimeout);
            
            
            if (i >= totalTimeout)
            {
            	Report.Error("Could not find Last Status = 110 in JDE DEV after " + timeoutMinutes + " minutes, the check timed out.");
        		Ranorex.Validate.Fail();
            }
        }

    }
}
