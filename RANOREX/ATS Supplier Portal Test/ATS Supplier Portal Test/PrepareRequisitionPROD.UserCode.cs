///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ATS_Supplier_Portal_Test
{
    public partial class PrepareRequisitionPROD
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

//        public void ActiveMQRequest(string destinationName, string jsonPath, string environment)
//        {
//			
//			Uri connecturi = new Uri("activemq:tcp://10.254.56.109:61616");  //DEV/Test server//.109 for DEV
//			if(environment == "PROD")
//			{
//				connecturi = new Uri("activemq:tcp://10.254.56.110:61616"); //PROD Server//.110 or .111
//				Report.Info("Connecting to Active MQ PROD Server");
//			}
//			else
//			{
//				Report.Info("Connecting to Active MQ DEV Server");
//			}
//			IConnectionFactory factory = new NMSConnectionFactory(connecturi);
//			string json = File.ReadAllText(jsonPath);
//			if (json == null)
//				return;
//
//			using (IConnection connection = factory.CreateConnection())
//				using (ISession session = connection.CreateSession())
//			{
//				IDestination destination = SessionUtil.GetDestination(session, destinationName);
//
//				// Create producer
//				using (IMessageProducer producer = session.CreateProducer(destination))
//				{
//					// Start the connection so that messages will be processed.
//					connection.Start();
//					//producer.Persistent = true;
//
//					// Send a message
//					IMapMessage request = session.CreateMapMessage();
//					request.Body.SetString("source", json);
//
//					JObject dynObj = JObject.Parse(json);
//					if (dynObj == null)
//						return;
//
//					string headerID = "NoHeaderID";
//					if (dynObj != null)
//					{
//						headerID = dynObj["header_id"].ToString();
//					}
//
//					request.NMSCorrelationID = headerID;
//					request.Properties["NMSXGroupID"] = "ERPInboundRequisition";
//					request.Properties["myHeader"] = "Integration";
//					request.Properties["CorrelationID"] = headerID;
//					request.Properties["ATSCompanyNumber"] = "00800";
//					
//
//					producer.Send(request);
//					Report.Log(ReportLevel.Info, "Active MQ Request Sent");
//				}
//			}
//        }

    }
}
